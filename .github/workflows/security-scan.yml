name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: "0 2 * * *"
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  security_advisory:
  repository_dispatch:
    types: [security_scan]

env:
  NODE_VERSION: "18"
  RUST_VERSION: "1.75"

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate --json > audit-report.json || true

      - name: Upload audit report
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-report
          path: audit-report.json

      - name: Comment PR with vulnerabilities
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const auditData = JSON.parse(fs.readFileSync('audit-report.json', 'utf8'));
              if (auditData.vulnerabilities && Object.keys(auditData.vulnerabilities).length > 0) {
                const comment = `## ðŸ”’ Security Scan Results\n\nFound ${Object.keys(auditData.vulnerabilities).length} vulnerabilities:\n\n${Object.values(auditData.vulnerabilities).map(vuln => `- **${vuln.name}**: ${vuln.title} (${vuln.severity})`).join('\n')}\n\nPlease review and fix these vulnerabilities.`;
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('No vulnerabilities found or error parsing report');
            }

  # Rust security scanning
  rust-security-scan:
    name: Rust Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run cargo audit
        working-directory: ./apps/qualinova-contracts
        run: cargo audit --json > cargo-audit-report.json || true

      - name: Upload cargo audit report
        uses: actions/upload-artifact@v3
        with:
          name: cargo-audit-report
          path: ./apps/qualinova-contracts/cargo-audit-report.json

  # Code quality and security analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint security rules
        run: npm run lint -- --max-warnings=0

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for potential hardcoded secrets..."
          grep -r -i "password\|secret\|key\|token" ./apps/qualinova-frontend/src --exclude-dir=node_modules --exclude="*.test.*" --exclude="*.spec.*" || true

      - name: Check for console.log statements
        run: |
          echo "Checking for console.log statements in production code..."
          grep -r "console\.log" ./apps/qualinova-frontend/src --exclude-dir=node_modules --exclude="*.test.*" --exclude="*.spec.*" || true

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, rust-security-scan, code-quality]
    if: always()

    steps:
      - name: Security Summary
        run: |
          echo "## ðŸ”’ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Dependency Scan: ${{ needs.dependency-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Rust Security Scan: ${{ needs.rust-security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Security scans completed. Check artifacts for detailed reports." >> $GITHUB_STEP_SUMMARY
